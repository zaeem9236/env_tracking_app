{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { useDispatch } from 'react-redux';\nimport { updateUserDetails } from \"../../Redux/Slices/userDetailsSlice\";\nimport { Input } from 'react-native-elements';\nimport { loginUser } from \"../../Firebase/functions/loginUser\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      keyboardOpen = _useState2[0],\n      setKeyboardOpen = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loginErr = _useState4[0],\n      setLoginErr = _useState4[1];\n\n  var credentials = {\n    email: '',\n    password: ''\n  };\n  var validationSchema = Yup.object({\n    email: Yup.string().email('Invalid email !').required('Email is required'),\n    password: Yup.string().trim().min(6, 'Password is too short !').required('Password is required')\n  });\n  useEffect(function () {\n    Keyboard.addListener('keyboardDidShow', function () {\n      setKeyboardOpen(true);\n    });\n    Keyboard.addListener('keyboardDidHide', function () {\n      setKeyboardOpen(false);\n    });\n  }, []);\n  return _jsx(Formik, {\n    initialValues: credentials,\n    validationSchema: validationSchema,\n    validateOnChange: true,\n    children: function children(_ref2) {\n      var values = _ref2.values,\n          handleChange = _ref2.handleChange,\n          errors = _ref2.errors,\n          validateForm = _ref2.validateForm;\n      var email = values.email,\n          password = values.password;\n      return _jsxs(View, {\n        enabled: false,\n        style: styles.mainContainer,\n        children: [_jsxs(View, {\n          style: keyboardOpen ? styles.bannerContainer_hide : styles.bannerContainer,\n          children: [_jsx(Image, {\n            style: styles.bannerIcon,\n            source: require(\"../../../assets/banner_icon.png\")\n          }), _jsx(Text, {\n            style: styles.bannerText,\n            children: \" Tracking App \"\n          })]\n        }), _jsxs(View, {\n          style: styles.loginContainer(keyboardOpen),\n          children: [_jsx(View, {\n            style: styles.headingContainer,\n            children: _jsx(Text, {\n              style: styles.headingText,\n              children: \"Welcome\"\n            })\n          }), _jsx(View, {\n            style: styles.registerContainer,\n            children: _jsxs(View, {\n              style: {\n                flexDirection: 'row'\n              },\n              children: [_jsx(Text, {\n                style: styles.registerText,\n                children: \"Don't have an account? \"\n              }), _jsx(TouchableOpacity, {\n                onPress: function onPress() {\n                  navigation.navigate('RegisterScreen');\n                },\n                children: _jsx(Text, {\n                  style: {\n                    color: 'red'\n                  },\n                  children: \"Register\"\n                })\n              })]\n            })\n          }), _jsxs(View, {\n            style: styles.inputsContainer,\n            children: [_jsx(Input, {\n              label: \"Email\",\n              placeholder: \"email@address.com\",\n              leftIcon: {\n                type: 'font-awesome',\n                name: 'envelope',\n                size: 23,\n                marginRight: 7,\n                color: 'rgb(1, 87, 155)'\n              },\n              inputContainerStyle: {\n                borderBottomColor: 'rgb(1, 87, 155)'\n              },\n              onChangeText: handleChange('email'),\n              errorMessage: errors.email\n            }), _jsx(Input, {\n              label: \"Password\",\n              placeholder: \"password\",\n              leftIcon: {\n                type: 'font-awesome',\n                name: 'lock',\n                size: 24,\n                marginRight: 7,\n                color: 'rgb(1, 87, 155)'\n              },\n              inputContainerStyle: {\n                borderBottomColor: 'rgb(1, 87, 155)'\n              },\n              onChangeText: handleChange('password'),\n              errorMessage: errors.password\n            })]\n          }), _jsxs(View, {\n            style: styles.buttonContainer,\n            children: [_jsx(Text, {\n              style: styles.errorText,\n              children: loginErr\n            }), _jsx(TouchableOpacity, {\n              style: styles.loginButton,\n              onPress: function onPress() {\n                loginUser(email, password, navigation, setLoginErr, dispatch, updateUserDetails);\n              },\n              children: _jsx(Text, {\n                style: styles.loginButtonText,\n                children: \"Log in\"\n              })\n            })]\n          })]\n        })]\n      });\n    }\n  });\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  mainContainer: {\n    flex: 1\n  },\n  bannerContainer: {\n    backgroundColor: 'rgb(1, 87, 155)',\n    opacity: 0.9,\n    flex: 0.4,\n    justifyContent: 'center',\n    alignItems: 'center',\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n    elevation: 3\n  },\n  bannerContainer_hide: {\n    display: 'none'\n  },\n  bannerIcon: {\n    height: '30%',\n    width: '30%',\n    marginBottom: '3%',\n    resizeMode: 'contain'\n  },\n  bannerText: {\n    fontSize: 30,\n    fontWeight: '100',\n    color: 'white'\n  },\n  loginContainer: function loginContainer(keyboardOpen) {\n    return {\n      flex: keyboardOpen ? 1 : 0.6\n    };\n  },\n  headingContainer: {\n    flex: 0.2,\n    justifyContent: 'flex-end',\n    paddingLeft: '10%'\n  },\n  headingText: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    color: 'rgba(0,0,0,0.8)'\n  },\n  registerContainer: {\n    flex: 0.1,\n    paddingLeft: '10%'\n  },\n  registerText: {\n    fontSize: 14,\n    fontWeight: '400',\n    color: 'rgba(0,0,0,0.8)'\n  },\n  inputsContainer: {\n    flex: 0.4,\n    justifyContent: 'space-around',\n    paddingHorizontal: '10%'\n  },\n  buttonContainer: {\n    flex: 0.3,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  errorText: {\n    color: 'red',\n    fontSize: 17,\n    paddingBottom: '3%',\n    width: '100%',\n    textAlign: 'center'\n  },\n  loginButton: {\n    width: '75%',\n    height: '30%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 8,\n    backgroundColor: 'rgb(1, 87, 155)'\n  },\n  loginButtonText: {\n    color: 'white',\n    fontSize: 22\n  }\n});","map":{"version":3,"sources":["D:/Expo Projects/env_tracking_app/src/Screens/LoginScreen/LoginScreen.js"],"names":["React","useState","useEffect","useDispatch","updateUserDetails","Input","loginUser","Formik","Yup","LoginScreen","navigation","dispatch","keyboardOpen","setKeyboardOpen","loginErr","setLoginErr","credentials","email","password","validationSchema","object","string","required","trim","min","Keyboard","addListener","values","handleChange","errors","validateForm","styles","mainContainer","bannerContainer_hide","bannerContainer","bannerIcon","require","bannerText","loginContainer","headingContainer","headingText","registerContainer","flexDirection","registerText","navigate","color","inputsContainer","type","name","size","marginRight","borderBottomColor","buttonContainer","errorText","loginButton","loginButtonText","StyleSheet","create","flex","backgroundColor","opacity","justifyContent","alignItems","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","display","marginBottom","resizeMode","fontSize","fontWeight","paddingLeft","paddingHorizontal","paddingBottom","textAlign","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, Image, ImageBackground, StyleSheet, TouchableOpacity, Keyboard } from 'react-native';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateUserDetails } from '../../Redux/Slices/userDetailsSlice';\r\nimport { Input } from 'react-native-elements';\r\nimport { loginUser } from '../../Firebase/functions/loginUser';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n    let dispatch = useDispatch();\r\n    let [keyboardOpen, setKeyboardOpen] = useState(false);\r\n    let [loginErr, setLoginErr] = useState('');\r\n\r\n    const credentials = {\r\n        email: '',\r\n        password: '',\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Invalid email !').required('Email is required'),\r\n        password: Yup.string().trim().min(6, 'Password is too short !').required('Password is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        Keyboard.addListener('keyboardDidShow', () => { setKeyboardOpen(true) });\r\n        Keyboard.addListener('keyboardDidHide', () => { setKeyboardOpen(false) });\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <Formik initialValues={credentials} validationSchema={validationSchema} validateOnChange={true}>\r\n            {({ values, handleChange, errors, validateForm }) => {\r\n                const { email, password } = values;\r\n                return (\r\n                    <View enabled={false} style={styles.mainContainer}>\r\n                        <View style={keyboardOpen ? styles.bannerContainer_hide : styles.bannerContainer} >\r\n                            <Image style={styles.bannerIcon} source={require('../../../assets/banner_icon.png')} />\r\n                            <Text style={styles.bannerText}> Tracking App </Text>\r\n                        </View>\r\n                        <View style={styles.loginContainer(keyboardOpen)}>\r\n                            <View style={styles.headingContainer}>\r\n                                <Text style={styles.headingText}>Welcome</Text>\r\n                            </View>\r\n                            <View style={styles.registerContainer}>\r\n                                <View style={{ flexDirection: 'row' }}>\r\n                                    <Text style={styles.registerText}>Don't have an account? </Text>\r\n                                    <TouchableOpacity onPress={() => { navigation.navigate('RegisterScreen') }}>\r\n                                        <Text style={{ color: 'red' }}>Register</Text>\r\n                                    </TouchableOpacity>\r\n                                </View>\r\n                            </View>\r\n                            <View style={styles.inputsContainer}>\r\n                                <Input\r\n                                    label='Email'\r\n                                    placeholder='email@address.com'\r\n                                    leftIcon={{ type: 'font-awesome', name: 'envelope', size: 23, marginRight: 7, color: 'rgb(1, 87, 155)' }}\r\n                                    inputContainerStyle={{ borderBottomColor: 'rgb(1, 87, 155)' }}\r\n                                    onChangeText={handleChange('email')}\r\n                                    errorMessage={errors.email}\r\n                                />\r\n                                <Input\r\n                                    label='Password'\r\n                                    placeholder='password'\r\n                                    leftIcon={{ type: 'font-awesome', name: 'lock', size: 24, marginRight: 7, color: 'rgb(1, 87, 155)' }}\r\n                                    inputContainerStyle={{ borderBottomColor: 'rgb(1, 87, 155)' }}\r\n                                    onChangeText={handleChange('password')}\r\n                                    errorMessage={errors.password}\r\n                                />\r\n                            </View>\r\n                            <View style={styles.buttonContainer}>\r\n                                <Text style={styles.errorText}>{loginErr}</Text>\r\n                                <TouchableOpacity style={styles.loginButton} onPress={() => { loginUser(email, password, navigation, setLoginErr, dispatch, updateUserDetails) }}>\r\n                                    <Text style={styles.loginButtonText}>Log in</Text>\r\n                                </TouchableOpacity>\r\n                            </View>\r\n                        </View>\r\n                    </View>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    mainContainer: {\r\n        // backgroundColor: 'yellow',\r\n        flex: 1,\r\n    },\r\n    bannerContainer: {\r\n        backgroundColor: 'rgb(1, 87, 155)',\r\n        opacity: 0.9,\r\n        flex: 0.4,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n            width: 0,\r\n            height: 1,\r\n        },\r\n        shadowOpacity: 0.22,\r\n        shadowRadius: 2.22,\r\n        elevation: 3,\r\n    },\r\n    bannerContainer_hide: {\r\n        display: 'none'\r\n    },\r\n    bannerIcon: {\r\n        height : '30%',\r\n        width: '30%',\r\n        marginBottom: '3%',\r\n        resizeMode: 'contain'\r\n    },\r\n    bannerText: {\r\n        fontSize: 30,\r\n        fontWeight: '100',\r\n        color: 'white'\r\n    },\r\n    loginContainer: function (keyboardOpen) {\r\n        return {\r\n            // backgroundColor: 'yellow',\r\n            flex: (keyboardOpen) ? 1 : 0.6,\r\n        }\r\n    },\r\n    headingContainer: {\r\n        // backgroundColor: 'pink',\r\n        flex: 0.2,\r\n        justifyContent: 'flex-end',\r\n        paddingLeft: '10%',\r\n    },\r\n    headingText: {\r\n        fontSize: 30,\r\n        fontWeight: 'bold',\r\n        color: 'rgba(0,0,0,0.8)'\r\n    },\r\n    registerContainer: {\r\n        // backgroundColor: 'purple',\r\n        flex: 0.1,\r\n        paddingLeft: '10%',\r\n    },\r\n    registerText: {\r\n        fontSize: 14,\r\n        fontWeight: '400',\r\n        color: 'rgba(0,0,0,0.8)'\r\n    },\r\n    inputsContainer: {\r\n        // backgroundColor: 'orange',\r\n        flex: 0.4,\r\n        justifyContent: 'space-around',\r\n        paddingHorizontal: '10%'\r\n    },\r\n    buttonContainer: {\r\n        // backgroundColor: 'green',\r\n        flex: 0.3,\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    errorText: {\r\n        color: 'red',\r\n        fontSize: 17,\r\n        paddingBottom: '3%',\r\n        width: '100%',\r\n        textAlign: 'center'\r\n    },\r\n    loginButton: {\r\n        width: '75%',\r\n        height: '30%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        borderRadius: 8,\r\n        backgroundColor: 'rgb(1, 87, 155)',\r\n    },\r\n    loginButtonText: {\r\n        color: 'white',\r\n        fontSize: 22\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}