{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport RegisterTemplate from \"./RegisterTemplate\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar RegisterScreen = function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      registerScreen = _useState2[0],\n      setRegisterScreen = _useState2[1];\n\n  var userInfo = {\n    name: '',\n    email: '',\n    password: '',\n    c_password: ''\n  };\n  var validationSchema = Yup.object({\n    name: Yup.string().min(3, 'Invalid name !').required('Name is required'),\n    email: Yup.string().email('Invalid email !').required('Email is required'),\n    password: Yup.string().trim().min(6, 'Password is too short !').required('Password is required'),\n    c_password: Yup.string().equals([Yup.ref('password'), null], 'Password does not match')\n  });\n\n  function ConditionalPageRendering(handleChange, values, errors, validateField) {\n    switch (registerScreen) {\n      case 1:\n        return _jsx(RegisterTemplate, {\n          navigation: navigation,\n          registerScreen: registerScreen,\n          setRegisterScreen: setRegisterScreen,\n          formData: values,\n          value: values.email,\n          handleChange: handleChange,\n          fieldToUpdate: \"email\",\n          errorMessage: errors.email,\n          validateField: validateField,\n          imgSrc: require(\"../../../assets/email_icon.png\"),\n          headingText1: \"What's your email?\",\n          headingText2: \"We'll check if you have an account\",\n          inputLabel: \"Email\",\n          inputPlaceholder: \"xyz@gmail.com\"\n        });\n        break;\n\n      case 2:\n        return _jsx(RegisterTemplate, {\n          navigation: navigation,\n          registerScreen: registerScreen,\n          setRegisterScreen: setRegisterScreen,\n          formData: values,\n          value: values.name,\n          handleChange: handleChange,\n          fieldToUpdate: \"name\",\n          errorMessage: errors.name,\n          validateField: validateField,\n          imgSrc: require(\"../../../assets/user_icon.png\"),\n          headingText1: \"What's your Name\",\n          headingText2: \"Write your full name\",\n          inputLabel: \"Name\",\n          inputPlaceholder: \"Thomas harry\"\n        });\n        break;\n\n      case 3:\n        return _jsx(RegisterTemplate, {\n          navigation: navigation,\n          registerScreen: registerScreen,\n          setRegisterScreen: setRegisterScreen,\n          formData: values,\n          value: values.password,\n          handleChange: handleChange,\n          fieldToUpdate: \"password\",\n          errorMessage: errors.password,\n          validateField: validateField,\n          imgSrc: require(\"../../../assets/lock1_icon.png\"),\n          headingText1: \"Type your password\",\n          headingText2: \"Password must be 6 characters long\",\n          inputLabel: \"Password\",\n          inputPlaceholder: \"password\"\n        });\n        break;\n\n      case 4:\n        return _jsx(RegisterTemplate, {\n          navigation: navigation,\n          registerScreen: registerScreen,\n          setRegisterScreen: setRegisterScreen,\n          formData: values,\n          value: values.c_password,\n          handleChange: handleChange,\n          fieldToUpdate: \"c_password\",\n          errorMessage: errors.c_password,\n          validateField: validateField,\n          imgSrc: require(\"../../../assets/lock2_icon.png\"),\n          headingText1: \"Confirm your password\",\n          headingText2: \"Re type your password\",\n          inputLabel: \"Confirm password\",\n          inputPlaceholder: \"confirm password\"\n        });\n        break;\n\n      default:\n        return _jsx(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center'\n          },\n          children: _jsx(Text, {\n            children: \"Error (no Screen)\"\n          })\n        });\n    }\n  }\n\n  return _jsx(Formik, {\n    initialValues: userInfo,\n    validationSchema: validationSchema,\n    children: function children(_ref2) {\n      var values = _ref2.values,\n          handleChange = _ref2.handleChange,\n          errors = _ref2.errors,\n          validateField = _ref2.validateField;\n      var name = values.name,\n          email = values.email,\n          password = values.password,\n          c_password = values.c_password;\n      return ConditionalPageRendering(handleChange, values, errors, validateField);\n    }\n  });\n};\n\nexport default RegisterScreen;","map":{"version":3,"sources":["D:/Expo Projects/env_tracking_app/src/Screens/RegisterScreen/RegisterScreen.js"],"names":["React","useState","Formik","Yup","RegisterTemplate","RegisterScreen","navigation","registerScreen","setRegisterScreen","userInfo","name","email","password","c_password","validationSchema","object","string","min","required","trim","equals","ref","ConditionalPageRendering","handleChange","values","errors","validateField","require","flex","justifyContent","alignItems"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,OAAOC,gBAAP;;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AACvC,kBAA0CL,QAAQ,CAAC,CAAD,CAAlD;AAAA;AAAA,MAAKM,cAAL;AAAA,MAAqBC,iBAArB;;AAEA,MAAMC,QAAQ,GAAG;AACbC,IAAAA,IAAI,EAAE,EADO;AAEbC,IAAAA,KAAK,EAAE,EAFM;AAGbC,IAAAA,QAAQ,EAAE,EAHG;AAIbC,IAAAA,UAAU,EAAE;AAJC,GAAjB;AAOA,MAAMC,gBAAgB,GAAGX,GAAG,CAACY,MAAJ,CAAW;AAChCL,IAAAA,IAAI,EAAEP,GAAG,CAACa,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,gBAApB,EAAsCC,QAAtC,CAA+C,kBAA/C,CAD0B;AAEhCP,IAAAA,KAAK,EAAER,GAAG,CAACa,MAAJ,GAAaL,KAAb,CAAmB,iBAAnB,EAAsCO,QAAtC,CAA+C,mBAA/C,CAFyB;AAGhCN,IAAAA,QAAQ,EAAET,GAAG,CAACa,MAAJ,GAAaG,IAAb,GAAoBF,GAApB,CAAwB,CAAxB,EAA2B,yBAA3B,EAAsDC,QAAtD,CAA+D,sBAA/D,CAHsB;AAIhCL,IAAAA,UAAU,EAAEV,GAAG,CAACa,MAAJ,GAAaI,MAAb,CAAoB,CAACjB,GAAG,CAACkB,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CAApB,EAAiD,yBAAjD;AAJoB,GAAX,CAAzB;;AAQA,WAASC,wBAAT,CAAkCC,YAAlC,EAAgDC,MAAhD,EAAwDC,MAAxD,EAAgEC,aAAhE,EAA+E;AAC3E,YAAQnB,cAAR;AACI,WAAK,CAAL;AACI,eACI,KAAC,gBAAD;AACI,UAAA,UAAU,EAAED,UADhB;AAEI,UAAA,cAAc,EAAEC,cAFpB;AAGI,UAAA,iBAAiB,EAAEC,iBAHvB;AAII,UAAA,QAAQ,EAAEgB,MAJd;AAKI,UAAA,KAAK,EAAEA,MAAM,CAACb,KALlB;AAMI,UAAA,YAAY,EAAEY,YANlB;AAOI,UAAA,aAAa,EAAC,OAPlB;AAQI,UAAA,YAAY,EAAEE,MAAM,CAACd,KARzB;AASI,UAAA,aAAa,EAAEe,aATnB;AAUI,UAAA,MAAM,EAAEC,OAAO,kCAVnB;AAWI,UAAA,YAAY,EAAC,oBAXjB;AAYI,UAAA,YAAY,EAAC,oCAZjB;AAaI,UAAA,UAAU,EAAC,OAbf;AAcI,UAAA,gBAAgB,EAAC;AAdrB,UADJ;AAkBA;;AAEJ,WAAK,CAAL;AACI,eACI,KAAC,gBAAD;AACI,UAAA,UAAU,EAAErB,UADhB;AAEI,UAAA,cAAc,EAAEC,cAFpB;AAGI,UAAA,iBAAiB,EAAEC,iBAHvB;AAII,UAAA,QAAQ,EAAEgB,MAJd;AAKI,UAAA,KAAK,EAAEA,MAAM,CAACd,IALlB;AAMI,UAAA,YAAY,EAAEa,YANlB;AAOI,UAAA,aAAa,EAAC,MAPlB;AAQI,UAAA,YAAY,EAAEE,MAAM,CAACf,IARzB;AASI,UAAA,aAAa,EAAEgB,aATnB;AAUI,UAAA,MAAM,EAAEC,OAAO,iCAVnB;AAWI,UAAA,YAAY,EAAC,kBAXjB;AAYI,UAAA,YAAY,EAAC,sBAZjB;AAaI,UAAA,UAAU,EAAC,MAbf;AAcI,UAAA,gBAAgB,EAAC;AAdrB,UADJ;AAkBA;;AAEJ,WAAK,CAAL;AACI,eACI,KAAC,gBAAD;AACI,UAAA,UAAU,EAAErB,UADhB;AAEI,UAAA,cAAc,EAAEC,cAFpB;AAGI,UAAA,iBAAiB,EAAEC,iBAHvB;AAII,UAAA,QAAQ,EAAEgB,MAJd;AAKI,UAAA,KAAK,EAAEA,MAAM,CAACZ,QALlB;AAMI,UAAA,YAAY,EAAEW,YANlB;AAOI,UAAA,aAAa,EAAC,UAPlB;AAQI,UAAA,YAAY,EAAEE,MAAM,CAACb,QARzB;AASI,UAAA,aAAa,EAAEc,aATnB;AAUI,UAAA,MAAM,EAAEC,OAAO,kCAVnB;AAWI,UAAA,YAAY,EAAC,oBAXjB;AAYI,UAAA,YAAY,EAAC,oCAZjB;AAaI,UAAA,UAAU,EAAC,UAbf;AAcI,UAAA,gBAAgB,EAAC;AAdrB,UADJ;AAkBA;;AAEJ,WAAK,CAAL;AACI,eACI,KAAC,gBAAD;AACI,UAAA,UAAU,EAAErB,UADhB;AAEI,UAAA,cAAc,EAAEC,cAFpB;AAGI,UAAA,iBAAiB,EAAEC,iBAHvB;AAII,UAAA,QAAQ,EAAEgB,MAJd;AAKI,UAAA,KAAK,EAAEA,MAAM,CAACX,UALlB;AAMI,UAAA,YAAY,EAAEU,YANlB;AAOI,UAAA,aAAa,EAAC,YAPlB;AAQI,UAAA,YAAY,EAAEE,MAAM,CAACZ,UARzB;AASI,UAAA,aAAa,EAAEa,aATnB;AAUI,UAAA,MAAM,EAAEC,OAAO,kCAVnB;AAWI,UAAA,YAAY,EAAC,uBAXjB;AAYI,UAAA,YAAY,EAAC,uBAZjB;AAaI,UAAA,UAAU,EAAC,kBAbf;AAcI,UAAA,gBAAgB,EAAC;AAdrB,UADJ;AAkBA;;AACJ;AACI,eACI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,cAAc,EAAE,QAA3B;AAAqCC,YAAAA,UAAU,EAAE;AAAjD,WAAb;AAAA,oBACI,KAAC,IAAD;AAAA;AAAA;AADJ,UADJ;AArFR;AA2FH;;AAED,SACI,KAAC,MAAD;AAAQ,IAAA,aAAa,EAAErB,QAAvB;AAAiC,IAAA,gBAAgB,EAAEK,gBAAnD;AAAA,cACK,yBAAqD;AAAA,UAAlDU,MAAkD,SAAlDA,MAAkD;AAAA,UAA1CD,YAA0C,SAA1CA,YAA0C;AAAA,UAA5BE,MAA4B,SAA5BA,MAA4B;AAAA,UAApBC,aAAoB,SAApBA,aAAoB;AAClD,UAAQhB,IAAR,GAA8Cc,MAA9C,CAAQd,IAAR;AAAA,UAAcC,KAAd,GAA8Ca,MAA9C,CAAcb,KAAd;AAAA,UAAqBC,QAArB,GAA8CY,MAA9C,CAAqBZ,QAArB;AAAA,UAA+BC,UAA/B,GAA8CW,MAA9C,CAA+BX,UAA/B;AACA,aAAQS,wBAAwB,CAACC,YAAD,EAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,aAA/B,CAAhC;AACH;AAJL,IADJ;AAQH,CAxHD;;AA0HA,eAAerB,cAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport RegisterTemplate from './RegisterTemplate';\r\n\r\nconst RegisterScreen = ({ navigation }) => {\r\n    let [registerScreen, setRegisterScreen] = useState(1);\r\n\r\n    const userInfo = {\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        c_password: ''\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().min(3, 'Invalid name !').required('Name is required'),\r\n        email: Yup.string().email('Invalid email !').required('Email is required'),\r\n        password: Yup.string().trim().min(6, 'Password is too short !').required('Password is required'),\r\n        c_password: Yup.string().equals([Yup.ref('password'), null], 'Password does not match')\r\n    })\r\n\r\n\r\n    function ConditionalPageRendering(handleChange, values, errors, validateField) {\r\n        switch (registerScreen) {\r\n            case 1:\r\n                return (\r\n                    <RegisterTemplate\r\n                        navigation={navigation}\r\n                        registerScreen={registerScreen}\r\n                        setRegisterScreen={setRegisterScreen}\r\n                        formData={values}\r\n                        value={values.email}\r\n                        handleChange={handleChange}\r\n                        fieldToUpdate='email'\r\n                        errorMessage={errors.email}\r\n                        validateField={validateField}\r\n                        imgSrc={require('../../../assets/email_icon.png')}\r\n                        headingText1=\"What's your email?\"\r\n                        headingText2=\"We'll check if you have an account\"\r\n                        inputLabel=\"Email\"\r\n                        inputPlaceholder=\"xyz@gmail.com\"\r\n                    />\r\n                )\r\n                break;\r\n\r\n            case 2:\r\n                return (\r\n                    <RegisterTemplate\r\n                        navigation={navigation}\r\n                        registerScreen={registerScreen}\r\n                        setRegisterScreen={setRegisterScreen}\r\n                        formData={values}\r\n                        value={values.name}\r\n                        handleChange={handleChange}\r\n                        fieldToUpdate='name'\r\n                        errorMessage={errors.name}\r\n                        validateField={validateField}\r\n                        imgSrc={require('../../../assets/user_icon.png')}\r\n                        headingText1=\"What's your Name\"\r\n                        headingText2=\"Write your full name\"\r\n                        inputLabel=\"Name\"\r\n                        inputPlaceholder=\"Thomas harry\"\r\n                    />\r\n                )\r\n                break;\r\n\r\n            case 3:\r\n                return (\r\n                    <RegisterTemplate\r\n                        navigation={navigation}\r\n                        registerScreen={registerScreen}\r\n                        setRegisterScreen={setRegisterScreen}\r\n                        formData={values}\r\n                        value={values.password}\r\n                        handleChange={handleChange}\r\n                        fieldToUpdate='password'\r\n                        errorMessage={errors.password}\r\n                        validateField={validateField}\r\n                        imgSrc={require('../../../assets/lock1_icon.png')}\r\n                        headingText1=\"Type your password\"\r\n                        headingText2=\"Password must be 6 characters long\"\r\n                        inputLabel=\"Password\"\r\n                        inputPlaceholder=\"password\"\r\n                    />\r\n                )\r\n                break;\r\n\r\n            case 4:\r\n                return (\r\n                    <RegisterTemplate\r\n                        navigation={navigation}\r\n                        registerScreen={registerScreen}\r\n                        setRegisterScreen={setRegisterScreen}\r\n                        formData={values}\r\n                        value={values.c_password}\r\n                        handleChange={handleChange}\r\n                        fieldToUpdate='c_password'\r\n                        errorMessage={errors.c_password}\r\n                        validateField={validateField}\r\n                        imgSrc={require('../../../assets/lock2_icon.png')}\r\n                        headingText1=\"Confirm your password\"\r\n                        headingText2=\"Re type your password\"\r\n                        inputLabel=\"Confirm password\"\r\n                        inputPlaceholder=\"confirm password\"\r\n                    />\r\n                )\r\n                break;\r\n            default:\r\n                return (\r\n                    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n                        <Text>Error (no Screen)</Text>\r\n                    </View>\r\n                );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Formik initialValues={userInfo} validationSchema={validationSchema}>\r\n            {({ values, handleChange, errors, validateField }) => {\r\n                const { name, email, password, c_password } = values;\r\n                return (ConditionalPageRendering(handleChange, values, errors, validateField))\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n\r\n"]},"metadata":{},"sourceType":"module"}