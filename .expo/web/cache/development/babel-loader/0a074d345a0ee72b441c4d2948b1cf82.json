{"ast":null,"code":"import * as React from 'react';\nimport { useContext } from 'react';\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Dialog, Toast } from \"../index\";\nimport { Color } from \"../service\";\n\nvar Root = function Root(_ref) {\n  var theme = _ref.theme,\n      colors = _ref.colors,\n      children = _ref.children,\n      dialogConfig = _ref.dialogConfig,\n      toastConfig = _ref.toastConfig;\n  var colorScheme = useColorScheme();\n  var safeAreaInsetsContext = useContext(SafeAreaInsetsContext);\n  Color.colorsCustom = colors;\n  var isDark = (theme !== null && theme !== void 0 ? theme : colorScheme) === 'dark';\n\n  if (safeAreaInsetsContext === null) {\n    return React.createElement(SafeAreaProvider, null, React.createElement(View, {\n      style: {\n        flex: 1\n      }\n    }, React.createElement(Dialog, {\n      ref: Dialog.instance,\n      isDark: isDark,\n      config: dialogConfig\n    }), React.createElement(Toast, {\n      ref: Toast.instance,\n      isDark: isDark,\n      config: toastConfig\n    }), children));\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(Dialog, {\n    ref: Dialog.instance,\n    isDark: isDark,\n    config: dialogConfig\n  }), React.createElement(Toast, {\n    ref: Toast.instance,\n    isDark: isDark,\n    config: toastConfig\n  }), children);\n};\n\nexport default Root;","map":{"version":3,"sources":["Root.tsx"],"names":["Root","toastConfig","colorScheme","useColorScheme","safeAreaInsetsContext","useContext","Color","isDark","theme","flex","Dialog","dialogConfig","Toast"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,QAAA,OAAA;;;AAEA,SAAA,qBAAA,EAAA,gBAAA,QAAA,gCAAA;AACA,SAAA,MAAA,EAAA,KAAA;AACA,SAAA,KAAA;;AASA,IAAMA,IAAqC,GAAG,SAAxCA,IAAwC,OAA4D;AAAA,MAA3D,KAA2D,QAA3D,KAA2D;AAAA,MAA3D,MAA2D,QAA3D,MAA2D;AAAA,MAA3D,QAA2D,QAA3D,QAA2D;AAAA,MAA3D,YAA2D,QAA3D,YAA2D;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;AACxG,MAAMC,WAAW,GAAGC,cAApB,EAAA;AACA,MAAMC,qBAAqB,GAAGC,UAAU,CAAxC,qBAAwC,CAAxC;AACAC,EAAAA,KAAK,CAALA,YAAAA,GAAAA,MAAAA;AAEA,MAAMC,MAAM,GAAG,CAACC,KAAD,KAAA,IAACA,IAAAA,KAAD,KAAA,KAAA,CAACA,GAAD,KAACA,GAAD,WAAA,MAAf,MAAA;;AAEA,MAAIJ,qBAAqB,KAAzB,IAAA,EAAoC;AAClC,WACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,IAAA,EAEE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAE;AAAEK,QAAAA,IAAI,EAAE;AAAR;AAAb,KAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,MAAA,GAAG,EAAEC,MAAM,CAAnB,QAAA;AAA8B,MAAA,MAAM,EAApC,MAAA;AAA8C,MAAA,MAAM,EAAEC;AAAtD,KAAA,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAO,MAAA,GAAG,EAAEC,KAAK,CAAjB,QAAA;AAA4B,MAAA,MAAM,EAAlC,MAAA;AAA4C,MAAA,MAAM,EAAEX;AAApD,KAAA,CAFF,EAHJ,QAGI,CAFF,CADF;AAUD;;AAED,SAEE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE;AAAEQ,MAAAA,IAAI,EAAE;AAAR;AAAb,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,GAAG,EAAEC,MAAM,CAAnB,QAAA;AAA8B,IAAA,MAAM,EAApC,MAAA;AAA8C,IAAA,MAAM,EAAEC;AAAtD,GAAA,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAO,IAAA,GAAG,EAAEC,KAAK,CAAjB,QAAA;AAA4B,IAAA,MAAM,EAAlC,MAAA;AAA4C,IAAA,MAAM,EAAEX;AAApD,GAAA,CAFF,EAAA,QAAA,CAFF;AApBF,CAAA;;AA8BA,eAAA,IAAA","sourcesContent":["import * as React from 'react';\nimport { useContext } from 'react';\nimport { useColorScheme, View } from 'react-native';\nimport { SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Dialog, IConfigDialog, IConfigToast, Toast } from '../index';\nimport { Color, IColors } from '../service';\n\ntype IProps = {\n  dialogConfig?: Pick<IConfigDialog, 'closeOnOverlayTap' | 'autoClose'>;\n  toastConfig?: Pick<IConfigToast, 'autoClose'>;\n  theme?: 'light' | 'dark';\n  colors?: [IColors, IColors] /** ['light_colors' , 'dark_colors'] */;\n};\n\nconst Root: React.FunctionComponent<IProps> = ({ theme, colors, children, dialogConfig, toastConfig }) => {\n  const colorScheme = useColorScheme();\n  const safeAreaInsetsContext = useContext(SafeAreaInsetsContext);\n  Color.colorsCustom = colors;\n\n  const isDark = (theme ?? colorScheme) === 'dark';\n\n  if (safeAreaInsetsContext === null) {\n    return (\n      <SafeAreaProvider>\n        {/* eslint-disable-next-line react-native/no-inline-styles */}\n        <View style={{ flex: 1 }}>\n          <Dialog ref={Dialog.instance} isDark={isDark} config={dialogConfig} />\n          <Toast ref={Toast.instance} isDark={isDark} config={toastConfig} />\n          {children}\n        </View>\n      </SafeAreaProvider>\n    );\n  }\n\n  return (\n    // eslint-disable-next-line react-native/no-inline-styles\n    <View style={{ flex: 1 }}>\n      <Dialog ref={Dialog.instance} isDark={isDark} config={dialogConfig} />\n      <Toast ref={Toast.instance} isDark={isDark} config={toastConfig} />\n      {children}\n    </View>\n  );\n};\n\nexport default Root;\n"]},"metadata":{},"sourceType":"module"}