{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { ButtonGroup } from 'react-native-elements';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUserDetails } from \"../../Redux/Slices/userDetailsSlice\";\nimport { updateDeviceData } from \"../../Redux/Slices/deviceDataSlice\";\nimport StatusScreen from \"../StatusScreen/StatusScreen\";\nimport UpdateNumberScreen from \"../UpdateNumberScreen/UpdateNumberScreen\";\nimport MapScreen from \"../MapScreen/MapScreen\";\nimport { getDeviceData } from \"../../Firebase/functions/getDeviceData\";\nimport { logOut } from \"../../Firebase/functions/logOut\";\nimport { useNavigation } from '@react-navigation/native';\nimport { ALERT_TYPE, Dialog, Root, Toast } from 'react-native-alert-notification';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar windowHeight = Dimensions.get('window').height;\n\nvar HomeScreen = function HomeScreen() {\n  var navigation = useNavigation();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedIndex = _useState2[0],\n      setSelectedIndex = _useState2[1];\n\n  var userInfo = useSelector(getUserDetails);\n  var dispatch = useDispatch();\n  useEffect(function () {\n    getDeviceData(dispatch, updateDeviceData, showNotification);\n  }, []);\n  return _jsx(Root, {\n    children: _jsxs(View, {\n      style: styles.mainContainer(windowHeight),\n      children: [_jsxs(View, {\n        style: styles.topDashboardContainer,\n        children: [_jsxs(View, {\n          style: styles.topRow,\n          children: [_jsx(Text, {\n            style: styles.topRow_heading,\n            children: \"Welcome \" + userInfo.name\n          }), _jsx(TouchableOpacity, {\n            style: styles.topRow_button,\n            onPress: function onPress() {\n              logOut(navigation);\n            },\n            children: _jsx(Text, {\n              style: styles.topRow_buttonText,\n              children: \"Logout\"\n            })\n          })]\n        }), _jsx(View, {\n          style: styles.screenSelectRow,\n          children: _jsx(ButtonGroup, {\n            buttons: ['Status', 'Update Number', 'Gps'],\n            selectedIndex: selectedIndex,\n            onPress: function onPress(value) {\n              setSelectedIndex(value);\n            },\n            containerStyle: {\n              marginBottom: 0\n            },\n            selectedButtonStyle: {\n              backgroundColor: 'rgb(1, 87, 155)'\n            }\n          })\n        })]\n      }), _jsx(View, {\n        style: styles.appScreen,\n        children: selectedIndex === 0 ? _jsx(StatusScreen, {}) : selectedIndex === 1 ? _jsx(UpdateNumberScreen, {}) : _jsx(MapScreen, {})\n      })]\n    })\n  });\n};\n\nexport default HomeScreen;\nvar styles = StyleSheet.create({\n  mainContainer: function mainContainer(windowHeight) {\n    return {\n      height: windowHeight\n    };\n  },\n  topDashboardContainer: {\n    flex: 0.2\n  },\n  topRow: {\n    flexDirection: 'row',\n    paddingHorizontal: '5%',\n    justifyContent: 'space-between',\n    alignItems: 'flex-end',\n    flex: 0.5\n  },\n  topRow_heading: {\n    fontSize: 20,\n    color: 'rgb(1, 87, 155)'\n  },\n  topRow_button: {},\n  topRow_buttonText: {\n    fontSize: 18,\n    color: 'rgba(255, 0, 0, 0.7)'\n  },\n  screenSelectRow: {\n    flex: 0.5,\n    justifyContent: 'flex-end'\n  },\n  appScreen: {\n    flex: 0.8\n  }\n});\n\nfunction showNotification(temperature, humidity, vibration) {\n  Toast.show({\n    autoClose: 5000,\n    type: ALERT_TYPE.WARNING,\n    title: 'Notification',\n    textBody: \"\" + (temperature > 40 ? 'High temperature !\\r\\n' : temperature < 30 ? 'Low temperature !\\r\\n' : '') + (humidity > 80 ? 'High humidity !\\r\\n' : humidity < 40 ? 'Low humidity !\\r\\n' : '') + (vibration == 1 ? 'Vibration detected !' : ''),\n    onPress: function onPress() {\n      Toast.hide();\n    }\n  });\n}","map":{"version":3,"sources":["D:/Expo Projects/env_tracking_app/src/Screens/HomeScreen/HomeScreen.js"],"names":["React","useState","useEffect","ButtonGroup","useSelector","useDispatch","getUserDetails","updateDeviceData","StatusScreen","UpdateNumberScreen","MapScreen","getDeviceData","logOut","useNavigation","ALERT_TYPE","Dialog","Root","Toast","windowHeight","Dimensions","get","height","HomeScreen","navigation","selectedIndex","setSelectedIndex","userInfo","dispatch","showNotification","styles","mainContainer","topDashboardContainer","topRow","topRow_heading","name","topRow_button","topRow_buttonText","screenSelectRow","value","marginBottom","backgroundColor","appScreen","StyleSheet","create","flex","flexDirection","paddingHorizontal","justifyContent","alignItems","fontSize","color","temperature","humidity","vibration","show","autoClose","type","WARNING","title","textBody","onPress","hide"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native'\r\nimport { ButtonGroup } from 'react-native-elements'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getUserDetails } from '../../Redux/Slices/userDetailsSlice';\r\nimport { updateDeviceData } from '../../Redux/Slices/deviceDataSlice';\r\nimport StatusScreen from '../StatusScreen/StatusScreen';\r\nimport UpdateNumberScreen from '../UpdateNumberScreen/UpdateNumberScreen';\r\nimport MapScreen from '../MapScreen/MapScreen';\r\nimport { getDeviceData } from '../../Firebase/functions/getDeviceData';\r\nimport { logOut } from '../../Firebase/functions/logOut';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { ALERT_TYPE, Dialog, Root, Toast } from 'react-native-alert-notification';\r\n\r\nimport { Dimensions } from 'react-native';\r\nconst windowHeight = Dimensions.get('window').height;\r\n\r\nconst HomeScreen = () => {\r\n  const navigation = useNavigation();\r\n  let [selectedIndex, setSelectedIndex] = useState(0)\r\n  let userInfo = useSelector(getUserDetails);\r\n  let dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    getDeviceData(dispatch, updateDeviceData, showNotification)\r\n  }, [])\r\n\r\n  return (\r\n    <Root>\r\n      <View style={styles.mainContainer(windowHeight)}>\r\n        <View style={styles.topDashboardContainer}>\r\n          <View style={styles.topRow}>\r\n            <Text style={styles.topRow_heading}>{`Welcome ${userInfo.name}`}</Text>\r\n            <TouchableOpacity style={styles.topRow_button} onPress={() => { logOut(navigation) }}>\r\n              <Text style={styles.topRow_buttonText}>Logout</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n          <View style={styles.screenSelectRow}>\r\n            <ButtonGroup\r\n              buttons={['Status', 'Update Number', 'Gps']}\r\n              selectedIndex={selectedIndex}\r\n              onPress={(value) => {\r\n                setSelectedIndex(value);\r\n              }}\r\n              containerStyle={{ marginBottom: 0 }}\r\n              selectedButtonStyle={{ backgroundColor: 'rgb(1, 87, 155)' }}\r\n            />\r\n          </View>\r\n        </View>\r\n        <View style={styles.appScreen}>\r\n          {(selectedIndex === 0) ? <StatusScreen /> : (selectedIndex === 1) ? <UpdateNumberScreen /> : <MapScreen />}\r\n        </View>\r\n      </View>\r\n    </Root>\r\n  )\r\n}\r\n\r\nexport default HomeScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  mainContainer: function (windowHeight) {\r\n    return {\r\n      height: windowHeight\r\n    }\r\n  },\r\n  topDashboardContainer: {\r\n    // backgroundColor: 'red',\r\n    flex: 0.2,\r\n  },\r\n  topRow: {\r\n    // backgroundColor: 'green',\r\n    flexDirection: 'row',\r\n    paddingHorizontal: '5%',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'flex-end',\r\n    flex: 0.5,\r\n  },\r\n  topRow_heading: {\r\n    fontSize: 20,\r\n    color: 'rgb(1, 87, 155)'\r\n  },\r\n  topRow_button: {\r\n\r\n  },\r\n  topRow_buttonText: {\r\n    fontSize: 18,\r\n    color: 'rgba(255, 0, 0, 0.7)'\r\n  },\r\n  screenSelectRow: {\r\n    // backgroundColor: 'yellow',\r\n    flex: 0.5,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  appScreen: {\r\n    // backgroundColor: 'red',\r\n    flex: 0.8,\r\n  }\r\n\r\n})\r\n\r\nfunction showNotification(temperature, humidity, vibration) {\r\n  Toast.show({\r\n    autoClose: 5000,\r\n    type: ALERT_TYPE.WARNING,\r\n    title: 'Notification',\r\n    textBody: `${temperature > 40 ? 'High temperature !\\r\\n' : temperature < 30 ? 'Low temperature !\\r\\n' : ''}${humidity > 80 ? 'High humidity !\\r\\n' : humidity < 40 ? 'Low humidity !\\r\\n' : ''}${vibration == 1 ? 'Vibration detected !' : ''}`,\r\n    onPress: () => { Toast.hide() }\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}